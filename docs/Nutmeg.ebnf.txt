/* Prototype Grammar for Nutmeg - developed with the help of https://bottlecaps.de/rr/ui */

Statements ::= Statement ( ';' Statement )* ';'?

Statement ::= Expression | Binding

Binding ::= 
    Pattern ':=' Expression |
    Annotation* ('def'|'function'|'finesse') Identifier '(' Pattern ')' ('=>>'|':') Statements ('enddef'|'end')

Annotation ::=
    '@' ('command'|'unittest')

Pattern ::= 
    LiteralConstant |
    Modifier? Identifier | 
    '(' Pattern? ')' |
    Pattern '(' Pattern ')' |
    Pattern ( ',' Pattern )

Modifer ::= 'var' | 'val' | 'const'

Expression ::= 
    LiteralConstant |
    Identifier | 
    '(' Expression? ')' |
    Expression '(' Expression ')' |
    Expression InfixOperator Expression |
    LetExpression |
    IfExpression |
    IfNotExpression |
    SwitchExpression |
    LoopExpression |
    LambdaExpression |
    AssertExpression
     

LetExpression ::= 'let' Statements 'in' Statements ('endlet'|'end')

IfExpression ::= 'if' Expression ('then'|':') Statements ( ('elseif'|'elseifnot') Expression ('then'|':') Statments )* ('else' ':'? Statements)? ('endif'|'end')

IfNotExpression ::= 'ifnot' Expression ('then'|':') Statements ( ('elseif'|'elseifnot') Expression ('then'|':') Statments )* ('else' ':'? Statements)? ('endifnot'|'end')

SwitchExpression ::= 'switch' Expression ':'? ( ( 'case' Pattern )+ ('then'|':') Statements )* ('else' ':'? Statements)? ('endswitch'|'end')

LoopExpression ::= 'for' Queries ('do'|':') Statements ('endfor'|'end')

LambdaExpression ::= 'fn' Identifier? Pattern ('=>>'|':') Statements ('endfn'|'end')

AssertExpression ::= 'assert' Expression

Queries ::= 
    Query ('&&' Query)* |
    Query ('||' Query)*

Query ::= 
    Expression |
    Binding |
    Pattern 'in' Expression |
    '(' Queries ')'

InfixOperator ::= ',' | '+' | '*' | '-' | '/' | '//' | 'and' | 'or' | '..' | '...' | '.' Identifier

/* This is not quite right */
Identifier ::= [http://www.w3.org/TR/xml-names/#NT-NCName]

LiteralConstant ::= Character | String | Number | Boolean | Null

