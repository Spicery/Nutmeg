### You live in the city of Cartesia where all roads are laid out in a perfect grid. 
### You arrived ten minutes too early to an appointment, so you decided to take the 
### opportunity to go for a short walk. The city provides its citizens with a Walk 
### Generating App on their phones -- everytime you press the button it sends you an 
### array of one-letter strings representing directions to walk 
### (eg. ['n', 's', 'w', 'e']). You always walk only a single block for each letter 
### (direction) and you know it takes you one minute to traverse one city block, so 
### create a function that will return true if the walk the app gives you will take 
### you exactly ten minutes (you don't want to be early or late!) and will, of 
### course, return you to your starting point. Return false otherwise.

### Determine if walk is valid.
def is_valid_walk(walk):
    if walk.length == 10 then
        if 
            sum( 
                for d in walk:
                    if d == 'n' then 1 
                    elseif d == 's' then -1
                    endif
                endfor
            ) == 0
        then
            sum( 
                for d in walk:
                    if d == 'e' then 1 
                    elseif d == 'w' then -1
                    endif
                endfor
            ) == 0            
        else
            false
        endif
    else
        false
    endif
enddef

@unittest
def test1():
    assert is_valid_walk(['n','s','n','s','n','s','n','s','n','s'])
enddef

@unittest
def test2():
    assert not( is_valid_walk(['w','e','w','e','w','e','w','e','w','e','w','e'] ) ) 
enddef

@unittest
def test3():
    assert not( is_valid_walk(['w'] ) )
enddef

@unittest
def test4():
    assert not( is_valid_walk(['n','n','n','s','n','s','n','s','n','s']) )
enddef

@unittest
def test5():
    ### Added to ensure e/w check was required
    assert not( is_valid_walk(['n','w','w','s','n','s','n','s','n','s']) )
enddef
